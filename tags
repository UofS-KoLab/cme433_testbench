!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_KIND_DESCRIPTION!SystemVerilog	A,assert	/assertions (assert, assume, cover, restrict)/
!_TAG_KIND_DESCRIPTION!SystemVerilog	C,class	/classes/
!_TAG_KIND_DESCRIPTION!SystemVerilog	E,enum	/enumerators/
!_TAG_KIND_DESCRIPTION!SystemVerilog	H,checker	/checkers/
!_TAG_KIND_DESCRIPTION!SystemVerilog	I,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!SystemVerilog	K,package	/packages/
!_TAG_KIND_DESCRIPTION!SystemVerilog	L,clocking	/clocking/
!_TAG_KIND_DESCRIPTION!SystemVerilog	M,modport	/modports/
!_TAG_KIND_DESCRIPTION!SystemVerilog	N,nettype	/nettype declarations/
!_TAG_KIND_DESCRIPTION!SystemVerilog	O,constraint	/constraints/
!_TAG_KIND_DESCRIPTION!SystemVerilog	P,program	/programs/
!_TAG_KIND_DESCRIPTION!SystemVerilog	R,property	/properties/
!_TAG_KIND_DESCRIPTION!SystemVerilog	S,struct	/structs and unions/
!_TAG_KIND_DESCRIPTION!SystemVerilog	T,typedef	/type declarations/
!_TAG_KIND_DESCRIPTION!SystemVerilog	V,covergroup	/covergroups/
!_TAG_KIND_DESCRIPTION!SystemVerilog	b,block	/blocks (begin, fork)/
!_TAG_KIND_DESCRIPTION!SystemVerilog	c,constant	/constants (parameter, specparam, enum values)/
!_TAG_KIND_DESCRIPTION!SystemVerilog	d,define	/text macros/
!_TAG_KIND_DESCRIPTION!SystemVerilog	e,event	/events/
!_TAG_KIND_DESCRIPTION!SystemVerilog	f,function	/functions/
!_TAG_KIND_DESCRIPTION!SystemVerilog	i,instance	/instances of module or interface/
!_TAG_KIND_DESCRIPTION!SystemVerilog	l,ifclass	/interface class/
!_TAG_KIND_DESCRIPTION!SystemVerilog	m,module	/modules/
!_TAG_KIND_DESCRIPTION!SystemVerilog	n,net	/net data types/
!_TAG_KIND_DESCRIPTION!SystemVerilog	p,port	/ports/
!_TAG_KIND_DESCRIPTION!SystemVerilog	q,sequence	/sequences/
!_TAG_KIND_DESCRIPTION!SystemVerilog	r,register	/variable data types/
!_TAG_KIND_DESCRIPTION!SystemVerilog	t,task	/tasks/
!_TAG_KIND_DESCRIPTION!SystemVerilog	w,member	/struct and union members/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PARSER_VERSION!SystemVerilog	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/.cmc/lnz612/repos/UofS-KoLab/cme433_testbench/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	//
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
!_TAG_ROLE_DESCRIPTION!SystemVerilog!module	decl	/declaring instances/
A: Testing your setup	README.md	/^# A: Testing your setup$/;"	c
B: Adding your multiplier	README.md	/^## B: Adding your multiplier$/;"	s	chapter:A: Testing your setup
C: Running the testbench for ALL Layers	README.md	/^## C: Running the testbench for ALL Layers$/;"	s	chapter:A: Testing your setup
D: Running the testbench for the LAST Layer	README.md	/^## D: Running the testbench for the LAST Layer$/;"	s	chapter:A: Testing your setup
E: Calculating NMED	README.md	/^## E: Calculating NMED$/;"	s	chapter:A: Testing your setup
F: Requirements for your final report and presentation:	README.md	/^## F: Requirements for your final report and presentation:$/;"	s	chapter:A: Testing your setup
Instructions	README.md	/^# Instructions$/;"	c
Literature Review TB for CME 433 and EE 800	README.md	/^# Literature Review TB for CME 433 and EE 800$/;"	c
ROOT_DIR	python/get_mnist_stats.py	/^ROOT_DIR = "..\/results\/"$/;"	v
SVERILOG_BATCH_COUNT	python/get_mnist_stats.py	/^SVERILOG_BATCH_COUNT = 100$/;"	v
SVERILOG_BATCH_SIZE	python/get_mnist_stats.py	/^SVERILOG_BATCH_SIZE = 1$/;"	v
SVERILOG_FINAL_LAYER	python/get_mnist_stats.py	/^SVERILOG_FINAL_LAYER = 2$/;"	v
VERSION	python/get_mnist_stats.py	/^VERSION = sys.argv[1]$/;"	v
acc	python/float_mnist_model.py	/^acc = 0$/;"	v
acc	python/get_mnist_stats.py	/^acc = 0$/;"	v
acc32	testbench/tb_fullmnist.sv	/^  logic signed [31:0] acc32;$/;"	r	module:tb_fullmnist
base	src/mult16via8.sv	/^    for (i = 1; i < 4; i = i + 1) begin : base$/;"	b	module:mult16bvia8bit
batch_count	python/float_mnist_model.py	/^batch_count = 1000$/;"	v
batch_start	python/float_mnist_model.py	/^batch_start = 0$/;"	v
comma_loc	testbench/tb_fullmnist.sv	/^  int comma_loc;$/;"	r	module:tb_fullmnist
data	python/get_mnist_stats.py	/^    data = f.read()$/;"	v
exact_mult	src/exact_mult.sv	/^module exact_mult ($/;"	m
filter_zp	testbench/tb_fullmnist.sv	/^  logic signed [7:0] filter_zp;$/;"	r	module:tb_fullmnist
findCommaInString	testbench/tb_fullmnist.sv	/^function int findCommaInString(string in_string);$/;"	f
i	src/mult16via8.sv	/^  genvar i;$/;"	r	module:mult16bvia8bit
i_a	src/exact_mult.sv	/^    input  logic signed [ 7:0] i_a,$/;"	p	module:exact_mult
i_a	src/mult16via8.sv	/^    input  logic signed [15:0] i_a,$/;"	p	module:mult16bvia8bit
i_b	src/exact_mult.sv	/^    input  logic signed [ 7:0] i_b,$/;"	p	module:exact_mult
i_b	src/mult16via8.sv	/^    input  logic signed [15:0] i_b,$/;"	p	module:mult16bvia8bit
i_mulA1	testbench/tb_fullmnist.sv	/^  logic [7:0] i_mulA1, i_mulA2, i_mulB1, i_mulB2;$/;"	r	module:tb_fullmnist
i_mulA2	testbench/tb_fullmnist.sv	/^  logic [7:0] i_mulA1, i_mulA2, i_mulB1, i_mulB2;$/;"	r	module:tb_fullmnist
i_mulB1	testbench/tb_fullmnist.sv	/^  logic [7:0] i_mulA1, i_mulA2, i_mulB1, i_mulB2;$/;"	r	module:tb_fullmnist
i_mulB2	testbench/tb_fullmnist.sv	/^  logic [7:0] i_mulA1, i_mulA2, i_mulB1, i_mulB2;$/;"	r	module:tb_fullmnist
in8A	testbench/tb_fullmnist.sv	/^  logic signed [7:0] in8A;$/;"	r	module:tb_fullmnist
in8B	testbench/tb_fullmnist.sv	/^  logic signed [7:0] in8B;$/;"	r	module:tb_fullmnist
inA	src/mult16via8.sv	/^  logic signed [ 7:0] inA[0:3];$/;"	r	module:mult16bvia8bit
inB	src/mult16via8.sv	/^  logic signed [ 7:0] inB[0:3];$/;"	r	module:mult16bvia8bit
in_string	testbench/tb_fullmnist.sv	/^function int findCommaInString(string in_string);$/;"	p	function:findCommaInString
input_zp	testbench/tb_fullmnist.sv	/^  logic signed [7:0] input_zp;$/;"	r	module:tb_fullmnist
input_zp_dims	testbench/tb_fullmnist.sv	/^  int input_zp_dims;$/;"	r	module:tb_fullmnist
inputs_dir	testbench/tb_fullmnist.sv	/^  string root_dir, inputs_dir, layers_dir, outputs_dir, temp_fp, line, version;$/;"	r	module:tb_fullmnist
last_layer_mode	testbench/tb_fullmnist.sv	/^  int last_layer_mode;$/;"	r	module:tb_fullmnist
layer_b	testbench/tb_fullmnist.sv	/^  logic signed [31:0] layer_b[];$/;"	r	module:tb_fullmnist
layer_bdims	testbench/tb_fullmnist.sv	/^  int layer_bdims;$/;"	r	module:tb_fullmnist
layer_count	testbench/tb_fullmnist.sv	/^  int layer_count = 3;$/;"	r	module:tb_fullmnist
layer_height	python/float_mnist_model.py	/^            layer_height = int(layer_weights.shape[0]\/layer_output.shape[1])$/;"	v
layer_height	python/float_mnist_model.py	/^            layer_height = int(layer_weights.shape[0]\/len(mnist_input))$/;"	v
layer_i	testbench/tb_fullmnist.sv	/^  logic signed [7:0] layer_i[];$/;"	r	module:tb_fullmnist
layer_idims	testbench/tb_fullmnist.sv	/^  int layer_idims[];$/;"	r	module:tb_fullmnist
layer_o	testbench/tb_fullmnist.sv	/^  logic signed [7:0] layer_o[];$/;"	r	module:tb_fullmnist
layer_odims	testbench/tb_fullmnist.sv	/^  int layer_odims[];$/;"	r	module:tb_fullmnist
layer_output	python/float_mnist_model.py	/^                layer_output = matmul(layer_output, layer_weights_np, False)$/;"	v
layer_output	python/float_mnist_model.py	/^                layer_output = matmul(layer_output, layer_weights_np, True)$/;"	v
layer_output	python/float_mnist_model.py	/^                layer_output = softmax(layer_output)$/;"	v
layer_output	python/float_mnist_model.py	/^            layer_output = matmul(mnist_inputs_np, layer_weights_np, True)$/;"	v
layer_output	python/float_mnist_model.py	/^    layer_output = None$/;"	v
layer_start	testbench/tb_fullmnist.sv	/^  int layer_start;$/;"	r	module:tb_fullmnist
layer_type	testbench/tb_fullmnist.sv	/^  int layer_type;$/;"	r	module:tb_fullmnist
layer_w	testbench/tb_fullmnist.sv	/^  logic signed [7:0] layer_w[];$/;"	r	module:tb_fullmnist
layer_wdims	testbench/tb_fullmnist.sv	/^  int layer_wdims[];$/;"	r	module:tb_fullmnist
layer_weights	python/float_mnist_model.py	/^        layer_weights = np.load("..\/data\/EE800data\/mnist_wfloat\/layer{}_fw.npy".format(layer/;"	v
layer_weights_np	python/float_mnist_model.py	/^            layer_weights_np = layer_weights.reshape((layer_height, layer_width))$/;"	v
layer_width	python/float_mnist_model.py	/^            layer_width = int(len(mnist_input))$/;"	v
layer_width	python/float_mnist_model.py	/^            layer_width = layer_output.shape[1]$/;"	v
layers_dir	testbench/tb_fullmnist.sv	/^  string root_dir, inputs_dir, layers_dir, outputs_dir, temp_fp, line, version;$/;"	r	module:tb_fullmnist
line	testbench/tb_fullmnist.sv	/^  string root_dir, inputs_dir, layers_dir, outputs_dir, temp_fp, line, version;$/;"	r	module:tb_fullmnist
matmul	python/float_mnist_model.py	/^def matmul(input, weights, apply_relu):$/;"	f
meta_file	testbench/tb_fullmnist.sv	/^  int meta_file;$/;"	r	module:tb_fullmnist
mnist_input	python/float_mnist_model.py	/^    mnist_input = list(np.load("..\/data\/EE800data\/mnist_ifloat\/inf_{}.npy".format(in_idx)))$/;"	v
mnist_inputs_np	python/float_mnist_model.py	/^    mnist_inputs_np = np.array([mnist_input])$/;"	v
mult	src/mult16via8.sv	/^      exact_mult mult ($/;"	i	block:mult16bvia8bit.base	typeref:module:exact_mult
mult	src/mult16via8.sv	/^  exact_mult mult ($/;"	i	module:mult16bvia8bit	typeref:module:exact_mult
mult	testbench/tb_fullmnist.sv	/^  mult16bvia8bit mult ($/;"	i	module:tb_fullmnist	typeref:module:mult16bvia8bit
mult16bvia8bit	src/mult16via8.sv	/^module mult16bvia8bit ($/;"	m
np	python/float_mnist_model.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	python/get_mnist_stats.py	/^import numpy as np$/;"	I	nameref:module:numpy
o_mulP1	testbench/tb_fullmnist.sv	/^  logic [15:0] o_mulP1, o_mulP2;$/;"	r	module:tb_fullmnist
o_mulP2	testbench/tb_fullmnist.sv	/^  logic [15:0] o_mulP1, o_mulP2;$/;"	r	module:tb_fullmnist
o_z	src/exact_mult.sv	/^    output logic signed [15:0] o_z$/;"	p	module:exact_mult
o_z	src/mult16via8.sv	/^    output logic signed [31:0] o_z$/;"	p	module:mult16bvia8bit
offset16	testbench/tb_fullmnist.sv	/^  logic signed [15:0] offset16;$/;"	r	module:tb_fullmnist
operation_count	testbench/tb_fullmnist.sv	/^  int operation_count;$/;"	r	module:tb_fullmnist
ouP	src/mult16via8.sv	/^  logic signed [15:0] ouP[0:3];$/;"	r	module:mult16bvia8bit
output_file	testbench/tb_fullmnist.sv	/^  int output_file;$/;"	r	module:tb_fullmnist
output_quant_mult_dims	testbench/tb_fullmnist.sv	/^  int output_quant_mult_dims;$/;"	r	module:tb_fullmnist
output_quant_shift_dims	testbench/tb_fullmnist.sv	/^  int output_quant_shift_dims;$/;"	r	module:tb_fullmnist
output_zp	testbench/tb_fullmnist.sv	/^  logic signed [7:0] output_zp;$/;"	r	module:tb_fullmnist
output_zp_dims	testbench/tb_fullmnist.sv	/^  int output_zp_dims;$/;"	r	module:tb_fullmnist
outputs_dir	testbench/tb_fullmnist.sv	/^  string root_dir, inputs_dir, layers_dir, outputs_dir, temp_fp, line, version;$/;"	r	module:tb_fullmnist
predictions	python/get_mnist_stats.py	/^    predictions = twoscomp_to_decimal(predictions_bin, 8)$/;"	v
predictions_bin	python/get_mnist_stats.py	/^        predictions_bin = pfile.readlines()$/;"	v
predictions_bin	python/get_mnist_stats.py	/^    predictions_bin = []$/;"	v
product16	testbench/tb_fullmnist.sv	/^  logic signed [15:0] product16;$/;"	r	module:tb_fullmnist
product32	testbench/tb_fullmnist.sv	/^  logic signed [31:0] product32;$/;"	r	module:tb_fullmnist
product64	testbench/tb_fullmnist.sv	/^  logic signed [63:0] product64;$/;"	r	module:tb_fullmnist
quant_file	testbench/tb_fullmnist.sv	/^  int quant_file;$/;"	r	module:tb_fullmnist
quant_mult	testbench/tb_fullmnist.sv	/^  logic signed [31:0] quant_mult;$/;"	r	module:tb_fullmnist
quant_shift	testbench/tb_fullmnist.sv	/^  logic signed [31:0] quant_shift;$/;"	r	module:tb_fullmnist
relu32	testbench/tb_fullmnist.sv	/^  logic signed [31:0] relu32;$/;"	r	module:tb_fullmnist
root_dir	testbench/tb_fullmnist.sv	/^  string root_dir, inputs_dir, layers_dir, outputs_dir, temp_fp, line, version;$/;"	r	module:tb_fullmnist
round	testbench/tb_fullmnist.sv	/^  logic signed [63:0] round;$/;"	r	module:tb_fullmnist
shifted_filter	testbench/tb_fullmnist.sv	/^  logic signed [7:0] shifted_filter;$/;"	r	module:tb_fullmnist
shifted_input	testbench/tb_fullmnist.sv	/^  logic signed [15:0] shifted_input;$/;"	r	module:tb_fullmnist
shifted_output	testbench/tb_fullmnist.sv	/^  logic signed [15:0] shifted_output;$/;"	r	module:tb_fullmnist
shifted_product64	testbench/tb_fullmnist.sv	/^  logic signed [63:0] shifted_product64;$/;"	r	module:tb_fullmnist
softmax	python/float_mnist_model.py	/^def softmax(vector):$/;"	f
str_lines	python/float_mnist_model.py	/^    str_lines = None$/;"	v
tb_fullmnist	testbench/tb_fullmnist.sv	/^module tb_fullmnist;$/;"	m
temp	testbench/tb_fullmnist.sv	/^  int temp;$/;"	r	module:tb_fullmnist
temp_fp	testbench/tb_fullmnist.sv	/^  string root_dir, inputs_dir, layers_dir, outputs_dir, temp_fp, line, version;$/;"	r	module:tb_fullmnist
test_set	python/float_mnist_model.py	/^test_set = np.load("..\/data\/EE800data\/floatmnist_labels.npy")$/;"	v
test_y	python/get_mnist_stats.py	/^    test_y = np.frombuffer(gzip.decompress(data), dtype=np.uint8).copy()$/;"	v
test_y	python/get_mnist_stats.py	/^test_y = None$/;"	v
test_y	python/get_mnist_stats.py	/^test_y = test_y[8:]$/;"	v
total_shift	testbench/tb_fullmnist.sv	/^  logic signed [31:0] total_shift;$/;"	r	module:tb_fullmnist
twoscomp_to_decimal	python/get_mnist_stats.py	/^def twoscomp_to_decimal(inarray, bits_in_word):$/;"	f
version	testbench/tb_fullmnist.sv	/^  string root_dir, inputs_dir, layers_dir, outputs_dir, temp_fp, line, version;$/;"	r	module:tb_fullmnist
weight_zp_dims	testbench/tb_fullmnist.sv	/^  int weight_zp_dims;$/;"	r	module:tb_fullmnist
zp_file	testbench/tb_fullmnist.sv	/^  int zp_file;$/;"	r	module:tb_fullmnist
